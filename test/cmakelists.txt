project(Ispc_tutorial)


# # compile ISPC sources
# if (MSVC)
#     add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/mandelbrot_ispc.o ${PROJECT_BINARY_DIR}/ispcTest.h
#                         COMMAND ${CMAKE_SOURCE_DIR}/External/ispc-v1.20.0-windows/bin/ispc.exe --target=avx2 --target-os=windows --arch=x86-64 ${CMAKE_CURRENT_SOURCE_DIR}/mandelbrot_ispc.ispc --header-outfile=${PROJECT_BINARY_DIR}/ispcTest.h -o ${PROJECT_BINARY_DIR}/mandelbrot_ispc.o
#                         DEPENDS mandelbrot_ispc.ispc
#     )
# endif (MSVC)

# if (UNIX)
#     add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/simple.o ${PROJECT_BINARY_DIR}/include/simple.h
#                         COMMAND ${CMAKE_SOURCE_DIR}/External/ispc-v1.20.0-windows/bin/ispc.exe --target=avx2 --arch=x86-64 ${CMAKE_CURRENT_SOURCE_DIR}/simple.ispc --header-outfile=${PROJECT_BINARY_DIR}/include/simple.h -o ${PROJECT_BINARY_DIR}/simple.o
#                         DEPENDS simple.ispc
#     )
# endif (UNIX)

# # Make a library from the results of the ispc compilation
# add_library(ispcLibrary
#         STATIC
#         mandelbrot_ispc.o)

# # Set the linker language to C so the linker knows how to link
# SET_TARGET_PROPERTIES(
#     ispcLibrary
#     PROPERTIES
#     LINKER_LANGUAGE C 
# )

# # Add the ispcTest program exectuable
# add_executable(ispcTest)
# target_sources(ispcTest PRIVATE ispcTest.cpp)
# add_dependencies(ispcTest ispcLibrary) # Needed as dependency as the header file is generated by ISPC
# target_include_directories(ispcTest PRIVATE ${PROJECT_BINARY_DIR}/)

# # Now create main by linking with the ispc library
# target_link_libraries(
#     ispcTest 
#     ispcLibrary
# )

MESSAGE("RUNNING TEST CMAKE FILE......." )
IF(${WIN32})
        SET(ispcTest_LIB_FILE ${CMAKE_CURRENT_BINARY_DIR}/ispcTest.lib)
        SET(ISPC_COMPILER ispc.exe)
        SET(ISPC_OPTIONS --arch=x86-64 --target=host)
        SET(LIBRARIAN_COMMAND lib)
        SET(LIBRARIAN_OPTIONS /OUT:${ispcTest_LIB_FILE})
ELSE(${WIN32})
        SET(ispcTest_LIB_FILE ${CMAKE_CURRENT_BINARY_DIR}/libispcTest.a)
        SET(ISPC_COMPILER ispc)
        SET(ISPC_OPTIONS --arch=x86-64 --target=host)
        SET(LIBRARIAN_COMMAND ar)
        SET(LIBRARIAN_OPTIONS -cr -o ${ispcTest_LIB_FILE})
ENDIF(${WIN32})

SET(ispcTest_LIB_HEADER_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/include)

add_custom_command(OUTPUT ${ispcTest_LIB_FILE}
        COMMAND ${CMAKE_COMMAND} -E echo "Pre-build command"
        COMMAND ${ISPC_COMPILER} ${ISPC_OPTIONS} -o mandelbrot_ispc.o -I${CMAKE_CURRENT_SOURCE_DIR} -h ${CMAKE_CURRENT_SOURCE_DIR}/include/ispcTest.h ${CMAKE_CURRENT_SOURCE_DIR}/ispc/mandelbrot_ispc.ispc
        COMMAND ${LIBRARIAN_COMMAND} ${LIBRARIAN_OPTIONS} mandelbrot_ispc.o
        )

add_custom_target(ISPC_T
                   DEPENDS ${ispcTest_LIB_FILE}
)

add_library(ispcTest STATIC IMPORTED GLOBAL)
add_dependencies(ispcTest ISPC_T)

set_target_properties(ispcTest
        PROPERTIES
        IMPORTED_LOCATION ${ispcTest_LIB_FILE}
        INTERFACE_INCLUDE_DIRECTORIES ${ispcTest_LIB_HEADER_FOLDER}
        )

set_directory_properties(
        PROPERTIES
        ADDITIONAL_MAKE_CLEAN_FILES mandelbrot_ispc.o
)
MESSAGE("RUN OVER." )
# add_executable(test ispcTest.cpp)
# target_link_libraries(test ispcTest)


