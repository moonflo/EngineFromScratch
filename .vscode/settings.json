{
    "files.defaultLanguage": "c++", // ctrl+N新建文件后默认的语言
    "editor.formatOnType": true, // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码
    "editor.acceptSuggestionOnCommitCharacter": true,
    "editor.formatOnSave": true,
    "editor.suggest.snippetsPreventQuickSuggestions": false, // clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了
    "editor.acceptSuggestionOnEnter": "on", // 我个人的习惯，按回车时一定是真正的换行，只有tab才会接受Intellisense
    // "editor.snippetSuggestions": "top", // （可选）snippets显示在补全列表顶端，默认是inline
    "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法输入
    "code-runner.saveFileBeforeRun": true, // run code前保存
    "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false
    "code-runner.clearPreviousOutput": false, // 每次run code前清空属于code runner的终端消息，默认false
    "code-runner.ignoreSelection": true, // 默认为false，效果是鼠标选中一块代码后可以单独执行，但C是编译型语言，不适合这样用
    "terminal.integrated.enableBell": true,
    "code-runner.executorMap": {
        "javascript": "node",
        "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
        "c": "cd $dir && gcc '$fileName' -o '$fileNameWithoutExt.exe' -Wall -g -O2 -static-libgcc -std=c11 -fexec-charset=GBK && &'$dir$fileNameWithoutExt'",
        "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -std=c++14 -static-libgcc -fexec-charset=GBK  && &$dir$fileNameWithoutExt" // 此处采用CBK编码输出为了输出中文不乱码
    },
    "C_Cpp.clang_format_sortIncludes": true,
    "C_Cpp.default.compilerPath": "C:\\office_software\\mingw64\\bin\\clang.exe", // 格式化时调整include的顺序（按字母排序）
    "clangd.fallbackFlags": [
        // 增加项目自身头文件依赖path，因为使用vs2019编译不会生成compile_command.json文件，项目自己的头文件就不会找到
        "-I${workspaceFolder}/Framework/Interface", // 项目根目录
        "-I${workspaceFolder}/Framework/Common", // 项目根目录
        // // VC_includePath
        // "-ID:/Visual_Studio_IDE/VC/Tools/MSVC/14.33.31629/include",
        // "-ID:/Visual_Studio_IDE/VC/Tools/MSVC/14.33.31629/atlmfc/include",
        // "-ID:/Visual_Studio_IDE/VC/Auxiliary/VS/include",
        // "-ID:/Visual_Studio_IDE/VC/Auxiliary/VS/UnitTest/include",
        // // WindowsSDK_IncludePath
        // "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/ucrt",
        // "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um",
        // "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/shared",
        // "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/winrt",
        // "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/cppwinrt",
        // "-IC:/Program Files (x86)/Windows Kits/NETFXSDK/4.8/Include/um",
        //"-I${workspaceFolder}/third_party/include" // 第三方依赖的头文件目录
    ]
}
// C_cpp_prop file back up
// {
//     "configurations": [
//         {
//             "name": "Win32",
//             "includePath": [
//                 "${workspaceFolder}/**"
//             ],
//             "defines": [
//                 "_DEBUG",
//                 "UNICODE",
//                 "_UNICODE"
//             ],
//             "compilerPath": "C:\\office_software\\mingw64\\bin\\clang.exe",
//             "cStandard": "c17",
//             "cppStandard": "gnu++17",
//             "intelliSenseMode": "windows-clang-x64"
//         }
//     ],
//     "version": 4
// }